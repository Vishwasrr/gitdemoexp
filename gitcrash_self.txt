https://www.simplilearn.com/tutorials/git-tutorial/git-interview-questions

git restore: to revert the changes in a file after a commit

to reverse the added files:
git reset 
if the above command doesn't work, try:
git reset --hard 'HEAD@{1}'

git log --reflog to list all commits
(Note: Press q to quit)

pushing things into a new branch (or merging a branch to the main branch)
git checkout -b <branch_name>
git pull
# code modifications
git add file_name.txt
git add /folder/file_name.py
git add /folder/
git commit -m "udpates made"
git push origin <branch_name>

git command to create a branch
git branch [branch_name]

to save things without commiting:
git stash 
(Note: this will remove those changes)

But if you want to bring them back, run:
git stash pop 

To delete the stashed changes, we can run:
git stash drop

# adding this line just as an experiment 

with $ git push -u origin main if you get this error:
remote: Repository not found.
fatal: repository 'https://github.com/Vishwasrr/PytestDDTHybridFW.git~/' not found

try:
git remote set-url origin https://vishwasrr@github.com/Vishwasrr/PytestDDTHybridFW.git

git remote set-url origin https://username@github.com/Vishwasrr/repoName.git


A typical scenario: 
Let's say a developer has worked in a different timezone and he's updated some changes to the code.

You can see those changes in the main branches
These differences can be updated to our latest repositories with the help of this command:
git pull 

git branch: to list the branches 
The one with star is the current branch

git checkout branch_name (checkout to existing branch)
git checkout -b branch_name (create a new branch and checkout to it)

Let's say you've worked on feature_abc branches and made some changes. But there are some conflicts in the main branch because that code is too different from the code someone else has written. 

This happens when you checkout to main and try to do this:
(from main branch)
git merge feature_abc

In git merge, 
    everything above   <<<<<<<< HEAD 
    is the stuff from the main part.
    And everything below it till the ====================
    is the stuff added by us. 
    We can discuss this with the maintainer of the main branch and add or remove things accordingly and continue our add and push operation


Other important git commands:

soft delete: git branch -d feature_abc (throws an error saying the changes haven't been deleted yet)
hard delete: git branch -D feature_abc (deletes branch without any warning)

search file with substring: git grep "substring"
